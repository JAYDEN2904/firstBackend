/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Producer as PrismaProducer } from "@prisma/client";

export class ProducerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ProducerCountArgs, "select">): Promise<number> {
    return this.prisma.producer.count(args);
  }

  async producers<T extends Prisma.ProducerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProducerFindManyArgs>
  ): Promise<PrismaProducer[]> {
    return this.prisma.producer.findMany<Prisma.ProducerFindManyArgs>(args);
  }
  async producer<T extends Prisma.ProducerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProducerFindUniqueArgs>
  ): Promise<PrismaProducer | null> {
    return this.prisma.producer.findUnique(args);
  }
  async createProducer<T extends Prisma.ProducerCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProducerCreateArgs>
  ): Promise<PrismaProducer> {
    return this.prisma.producer.create<T>(args);
  }
  async updateProducer<T extends Prisma.ProducerUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProducerUpdateArgs>
  ): Promise<PrismaProducer> {
    return this.prisma.producer.update<T>(args);
  }
  async deleteProducer<T extends Prisma.ProducerDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProducerDeleteArgs>
  ): Promise<PrismaProducer> {
    return this.prisma.producer.delete(args);
  }
}
